name: AnalyzeBest-达标组合池检验-自托管

on:
  workflow_dispatch:
    inputs:
      lottery_type:
        description: '选择彩种类型'
        required: true
        default: 'p5'
        type: choice
        options:
          - p5
          - 3d
          - all

permissions:
  contents: write

jobs:
  analyze_best:
    name: Analyze best tasks for ${{ inputs.lottery_type }}
    runs-on: [self-hosted, ARM64]
    env:
      MYSQL_HOST: 127.0.0.1
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      BACKUP_PASSWORD: ${{ secrets.BACKUP_PASSWORD }}
      GH_TOKEN: ${{ secrets.PERSONAL_GH_PAT }}
      GITHUB_RUN_NUMBER: ${{ github.run_number }}
      WECHAT_API_URL: ${{ secrets.WECHAT_API_URL }}
      WECHAT_API_KEY: ${{ secrets.WECHAT_API_KEY }}
      EXPORT_DIR: best_tasks_export
    steps:
      - name: 🕒 打印时间（UTC + Asia/Shanghai）
        run: |
          echo "==== 🕒 当前时间 ===="
          echo "UTC: $(date -u '+%Y-%m-%d %H:%M:%S')"
          echo "Asia/Shanghai: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"
          echo "====================="

      - name: 📥 拉取代码
        uses: actions/checkout@v4

      - name: 🐳 启动 MySQL 容器
        run: |
          docker run -d \
            --name mysql-service-${{ github.run_id }} \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
            -e MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }} \
            -p 3306:3306 \
            --health-cmd="mysqladmin ping -h 127.0.0.1 --silent" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=30 \
            mysql:8.0.36

      - name: 🕓 等待 MySQL 容器变为 healthy
        run: |
          CONTAINER=mysql-service-${{ github.run_id }}
          echo "等待容器 $CONTAINER 变为 healthy ..."
          
          for i in {1..30}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' "$CONTAINER" 2>/dev/null || echo "notfound")
          
            if [[ "$STATUS" == "healthy" ]]; then
              echo "✅ MySQL 容器健康 ✔️"
              exit 0
            elif [[ "$STATUS" == "unhealthy" ]]; then
              echo "❌ MySQL 容器 unhealthy ❗"
              docker logs "$CONTAINER"
              exit 1
            elif [[ "$STATUS" == "notfound" ]]; then
              echo "⏳ 容器尚未创建好 ($i)..."
            else
              echo "⏳ 当前状态：$STATUS ($i)..."
            fi
            sleep 2
          done
          
          echo "❌ 超时：容器 30 秒内未变为 healthy"
          docker logs "$CONTAINER"
          exit 1

      - name: 📦 🛠️ 初始化 best_tasks 达标组合表（支持 P5 / 3D）
        run: |
          echo "=============================="
          echo "🎯 开始执行 best_tasks_ok 表导入工作流"
          echo "⏱ 开始时间: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "=============================="
          START_TIME=$(date +%s)
          
          echo "📁 创建目录 & 下载 ZIP"
          mkdir -p data
          curl -L -o data/best_tasks_ok.zip \
            https://github.com/suwei8/LottoAI3_HitMatrix/releases/download/ok/best_tasks_ok.sql.zip
          
          echo "🔓 解压 ZIP"
          sudo apt-get update && sudo apt-get install -y unzip pv
          unzip -P ${{ secrets.BACKUP_PASSWORD }} -d data/ data/best_tasks_ok.zip
          
          echo "🚀 恢复数据库（显示导入进度）"
          pv data/best_tasks_ok.sql | \
            mysql -h$MYSQL_HOST -P$MYSQL_PORT -u$MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE
          
          echo "✅ 检查导入结果：打印前5条记录"
          
          echo "📄 表：best_tasks_3d（前5行）"
          mysql -h$MYSQL_HOST -P$MYSQL_PORT -u$MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE \
            -e "SELECT * FROM best_tasks_3d LIMIT 5;"
          
          echo "📄 表：best_tasks_p5（前5行）"
          mysql -h$MYSQL_HOST -P$MYSQL_PORT -u$MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE \
            -e "SELECT * FROM best_tasks_p5 LIMIT 5;"
          
          echo "🧹 清理中间文件"
          rm -rf data/*
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "=============================="
          echo "✅ 执行完毕：耗时 ${DURATION} 秒（约 $((DURATION / 60)) 分钟）"
          echo "⏱ 结束时间: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "=============================="

#      - name: 📦 下载并还原最近30期预测数据备份（支持 P5/3D/all）
#        run: |
#          restore_data() {
#            local lottery=$1
#            if [ "$lottery" = "3d" ]; then
#              REPO="LottoAI3_HitMatrix_date_3d"
#            else
#              REPO="LottoAI3_HitMatrix_date"
#            fi
#
#            echo "=============================="
#            echo "🎯 开始执行 Download $lottery 预测数据备份"
#            echo "⏱ 开始时间: $(date '+%Y-%m-%d %H:%M:%S')"
#            echo "=============================="
#            START_TIME=$(date +%s)
#
#            mkdir -p data
#
#            echo "📥 下载来自仓库：$REPO"
#            curl -L -o data/lotto_${lottery}_backup.zip \
#              https://github.com/suwei8/${REPO}/releases/download/backup-${lottery}/lotto_${lottery}_backup.zip
#
#            echo "🔓 解压 ZIP"
#            sudo apt-get update && sudo apt-get install -y unzip pv
#            unzip -P ${{ secrets.BACKUP_PASSWORD }} -d data/ data/lotto_${lottery}_backup.zip
#
#            echo "🚀 恢复数据库（显示导入进度）"
#            gunzip -c data/lotto_${lottery}.sql.gz | \
#              pv -s $(gzip -l data/lotto_${lottery}.sql.gz | awk 'NR==2 {print $2}') | \
#              mysql -h$MYSQL_HOST -P$MYSQL_PORT -u$MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE
#
#            echo "🧹 清理中间文件"
#            rm -rf data/*
#
#            END_TIME=$(date +%s)
#            DURATION=$((END_TIME - START_TIME))
#            echo "=============================="
#            echo "✅ $lottery 执行完毕：耗时 ${DURATION} 秒（约 $((DURATION / 60)) 分钟）"
#            echo "⏱ 结束时间: $(date '+%Y-%m-%d %H:%M:%S')"
#            echo "=============================="
#          }
#
#          if [[ "${{ inputs.lottery_type }}" == "3d" ]]; then
#            restore_data 3d
#          elif [[ "${{ inputs.lottery_type }}" == "p5" ]]; then
#            restore_data p5
#          elif [[ "${{ inputs.lottery_type }}" == "all" ]]; then
#            restore_data 3d
#            restore_data p5
#          else
#            echo "❌ 无效 lottery_type: ${{ inputs.lottery_type }}"
#            exit 1
#          fi

#      - name: 🐍 安装 Python 依赖
#        uses: actions/setup-python@v5
#        with:
#          python-version: '3.11'
#
#      - name: 📦 安装 requirements.txt
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.txt


#      - name: 📊 分析达标任务（全部分位串行处理）
#        run: |
#          LOTTERY=${{ inputs.lottery_type }}
#
#          run_analysis() {
#            local lottery=$1
#            local max_pos=$2
#            echo "===== 🎯 分析 $lottery ====="
#            for pos in $(seq 0 $max_pos); do
#              echo "➡️ 分析 $lottery - 分位 $pos"
#              python scripts/analyze_best_tasks.py $lottery $pos
#            done
#          }
#
#          if [[ "$LOTTERY" == "3d" ]]; then
#            run_analysis 3d 2
#          elif [[ "$LOTTERY" == "p5" ]]; then
#            run_analysis p5 4
#          elif [[ "$LOTTERY" == "all" ]]; then
#            run_analysis 3d 2
#            run_analysis p5 4
#          else
#            echo "❌ 未知彩种类型: $LOTTERY"
#            exit 1
#          fi

      - name: ⬆️ 导出 best_tasks_3d / p5 并上传至 Releases
        run: |
          echo "📁 创建导出目录"
          mkdir -p best_tasks_export

          echo "📦 导出 SQL 表..."
          mysqldump -h$MYSQL_HOST -P$MYSQL_PORT -u$MYSQL_USER -p$MYSQL_PASSWORD \
            $MYSQL_DATABASE best_tasks_3d best_tasks_p5 > best_tasks_export/best_tasks_ok.sql

          echo "🔐 安装 zip 工具并压缩（密码保护）"
          sudo apt-get update && sudo apt-get install -y zip
          cd best_tasks_export
          zip -P "$BACKUP_PASSWORD" best_tasks_ok.sql.zip best_tasks_ok.sql
          cd ..

          echo "🚀 上传 ZIP 到 GitHub Releases ➜ tag=ok"
          gh release upload ok best_tasks_export/best_tasks_ok.sql.zip --clobber

          echo "✅ 完成导出与上传 🎉"

      - name: 🧹 清理 MySQL 容器
        if: always()
        run: |
          docker rm -f mysql-service-${{ github.run_id }} || true
